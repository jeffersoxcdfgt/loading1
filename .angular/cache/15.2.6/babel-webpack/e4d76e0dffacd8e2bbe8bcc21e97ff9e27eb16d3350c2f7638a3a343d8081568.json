{"ast":null,"code":"import { isObservable, of } from 'rxjs';\nimport { map, startWith, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class WithLoadingPipe {\n  transform(val) {\n    let ret = null;\n    if (isObservable(val)) {\n      ret = val.pipe(map(value => ({\n        loading: false,\n        value\n      })), startWith({\n        loading: true\n      }), catchError(error => of({\n        loading: false,\n        error\n      })));\n    } else {\n      console.log(565656565);\n      ret = val;\n    }\n    return ret;\n  }\n}\nWithLoadingPipe.ɵfac = function WithLoadingPipe_Factory(t) {\n  return new (t || WithLoadingPipe)();\n};\nWithLoadingPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"withLoading\",\n  type: WithLoadingPipe,\n  pure: true\n});","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,EAAE,QAAQ,MAAM;AACvC,SAASC,GAAG,EAAEC,SAAS,EAAEC,UAAU,QAAa,gBAAgB;;AAKhE,OAAM,MAAOC,eAAe;EAC1BC,SAAS,CAACC,GAAO;IACf,IAAIC,GAAG,GAAG,IAAI;IACd,IAAGR,YAAY,CAACO,GAAG,CAAC,EAAC;MACjBC,GAAG,GAAGD,GAAG,CAACE,IAAI,CACVP,GAAG,CAAEQ,KAAU,KAAM;QAAEC,OAAO,EAAE,KAAK;QAAED;MAAK,CAAE,CAAC,CAAC,EAChDP,SAAS,CAAC;QAAEQ,OAAO,EAAE;MAAI,CAAE,CAAC,EAC5BP,UAAU,CAACQ,KAAK,IAAIX,EAAE,CAAC;QAAEU,OAAO,EAAE,KAAK;QAAEC;MAAK,CAAE,CAAC,CAAC,CAAC;KAC1D,MACI;MACDC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtBN,GAAG,GAAID,GAAG;;IAEd,OAAOC,GAAG;EAEZ;;AAfWH,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;;QAAfA,eAAe;EAAAU;AAAA","names":["isObservable","of","map","startWith","catchError","WithLoadingPipe","transform","val","ret","pipe","value","loading","error","console","log","pure"],"sourceRoot":"","sources":["/Users/jefferson.medina/Documents/loading/loading1/src/app/with-loading.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { isObservable, of } from 'rxjs';\nimport { map, startWith, catchError, tap } from 'rxjs/operators';\n\n@Pipe({\n  name: 'withLoading',\n})\nexport class WithLoadingPipe implements PipeTransform {\n  transform(val:any) {\n    let ret = null\n    if(isObservable(val)){\n        ret = val.pipe(\n            map((value: any) => ({ loading: false, value })),\n            startWith({ loading: true }),\n            catchError(error => of({ loading: false, error })))\n    }\n    else {\n        console.log(565656565)\n        ret  = val\n    }\n    return ret\n\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}