{"ast":null,"code":"import { isObservable, of } from 'rxjs';\nimport { map, startWith, catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class WithLoadingPipe {\n  transform(val) {\n    return isObservable(val) ? val.pipe(tap(value => console.log(value, 111)), map(value => ({\n      loading: false,\n      value\n    })), startWith({\n      loading: true\n    }), catchError(error => of({\n      loading: false,\n      error\n    }))) : val;\n  }\n}\nWithLoadingPipe.ɵfac = function WithLoadingPipe_Factory(t) {\n  return new (t || WithLoadingPipe)();\n};\nWithLoadingPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"withLoading\",\n  type: WithLoadingPipe,\n  pure: true\n});","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,EAAE,QAAQ,MAAM;AACvC,SAASC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;AAKhE,OAAM,MAAOC,eAAe;EAC1BC,SAAS,CAACC,GAAO;IACf,OAAOR,YAAY,CAACQ,GAAG,CAAC,GACpBA,GAAG,CAACC,IAAI,CACRJ,GAAG,CAAEK,KAAK,IAAGC,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,GAAG,CAAC,CAAC,EACpCR,GAAG,CAAEQ,KAAU,KAAM;MAAEG,OAAO,EAAE,KAAK;MAAEH;IAAK,CAAE,CAAC,CAAC,EAChDP,SAAS,CAAC;MAAEU,OAAO,EAAE;IAAI,CAAE,CAAC,EAC5BT,UAAU,CAACU,KAAK,IAAIb,EAAE,CAAC;MAAEY,OAAO,EAAE,KAAK;MAAEC;IAAK,CAAE,CAAC,CAAC,CACnD,GACCN,GAAG;EACT;;AAVWF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;;QAAfA,eAAe;EAAAS;AAAA","names":["isObservable","of","map","startWith","catchError","tap","WithLoadingPipe","transform","val","pipe","value","console","log","loading","error","pure"],"sourceRoot":"","sources":["/Users/jefferson.medina/Documents/loading/loading1/src/app/with-loading.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { isObservable, of } from 'rxjs';\nimport { map, startWith, catchError, tap } from 'rxjs/operators';\n\n@Pipe({\n  name: 'withLoading',\n})\nexport class WithLoadingPipe implements PipeTransform {\n  transform(val:any) {\n    return isObservable(val)\n      ? val.pipe(\n        tap((value)=>console.log(value,111)),\n        map((value: any) => ({ loading: false, value })),\n        startWith({ loading: true }),\n        catchError(error => of({ loading: false, error }))\n      )\n      : val;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}